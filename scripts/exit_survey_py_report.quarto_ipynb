{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Exit Surveys for All Colleges\"\n",
        "author: Jonathan A. Pedroza PhD\n",
        "format:\n",
        "  html:\n",
        "      toc: true\n",
        "---"
      ],
      "id": "68a8fe4a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from matplotlib import rcParams \n",
        "import numpy as np\n",
        "import streamlit as st\n",
        "import plotnine as pn\n",
        "import plotly.express as px\n",
        "from great_tables import GT as gt\n",
        "from janitor import clean_names\n",
        "\n",
        "pd.set_option('mode.copy_on_write', True)\n",
        "pd.set_option('display.max_columns', None)\n",
        "rcParams.update({'savefig.bbox': 'tight'})\n",
        "\n",
        "grad = pd.read_csv(\"https://raw.githubusercontent.com/jpedroza1228/exitsurveys/main/data/full_grad.csv\").clean_names(case_type = 'snake')"
      ],
      "id": "cb3817dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "grad.head()\n",
        "\n",
        "grad.columns.tolist()"
      ],
      "id": "a175f58b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "program_cols = grad[grad.columns[grad.columns.str.contains('year|program|_ex$|ex_good$|_fair_poor$')]]\n",
        "\n",
        "program_df = grad[program_cols.columns]\n",
        "\n",
        "# program_long = program_df.melt(\n",
        "#   id_vars = ['year', 'program'], value_vars = program_cols.columns,\n",
        "#   var_name = 'program_req', value_name = 'program_values'\n",
        "#   )\n",
        "\n",
        "# program_long.dropna()"
      ],
      "id": "8907625f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# unique variable names \n",
        "unique_program_var = program_cols.rename(columns = lambda x: pd.Series(x).str.replace(r'(_ex_good|_fair_poor|_ex)$', '', regex = True).iloc[0]).columns.unique()\n",
        "\n",
        "# all the variables included\n",
        "program_cols.columns.tolist()\n",
        "\n",
        "# all the programs to choose from\n",
        "all_programs = program_df['program'].unique().tolist()\n",
        "\n",
        "program_title = ['', '', 'Faculty Quality', 'Program Quality', 'Financial Support for Grad Students', 'Keeping up With Field', 'Academic Guidance Quality', 'Intellectual Community', 'Career/Professional Development', 'Facilities/Equipment', 'Student Involvement in Program Decisions', 'Research Opportunities', 'Evaluation Criteria Fairness', 'Diversity & Inclusive Community', 'Grant/Funding Training', 'Preparation for Teaching', 'Evaluation Criteria Clarity', 'Interdisciplinary Support', 'Professional Ethics Training']\n",
        "\n",
        "program_title_df = pd.DataFrame({'var_name': unique_program_var, 'title_name': program_title})\n",
        "\n",
        "# to only get one value and no longer be treated as a DataFrame\n",
        "program_title_df.loc[program_title_df['var_name'] == 'fac_qual', 'title_name'].iloc[0]"
      ],
      "id": "c3ebeb1e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# ex = program_df.copy()\n",
        "# var_string = 'fac_qual'\n",
        "# ex = ex.loc[:, ex.columns.str.contains(f'year|program|{var_string}')]\n",
        "\n",
        "# ex[f'{var_string}_good'] = ex.loc[:, ex.columns.str.contains('_ex_good$')].squeeze() - ex.loc[:, ex.columns.str.contains('_ex$')].squeeze()\n",
        "\n",
        "# ex = ex.drop(columns = f'{var_string}_ex_good')\n",
        "\n",
        "def remove_excellent_good(df, var_string, long = False):\n",
        "  if long == False:\n",
        "    df = df.loc[:, df.columns.str.contains(f'year|program|{var_string}')]\n",
        "\n",
        "    df[f'{var_string}_good'] = df.loc[:, df.columns.str.contains('_ex_good$')].squeeze() - df.loc[:, df.columns.str.contains('_ex$')].squeeze()\n",
        "\n",
        "    df = df.drop(columns = f'{var_string}_ex_good')\n",
        "\n",
        "    return df\n",
        "\n",
        "  elif long == True:\n",
        "    df = df.loc[:, df.columns.str.contains(f'year|program|{var_string}')]\n",
        "\n",
        "    df[f'{var_string}_good'] = df.loc[:, df.columns.str.contains('_ex_good$')].squeeze() - df.loc[:, df.columns.str.contains('_ex$')].squeeze()\n",
        "\n",
        "    df = df.drop(columns = f'{var_string}_ex_good')\n",
        "\n",
        "    df = df.melt(id_vars = ['year', 'program'], value_vars = df.loc[:, df.columns.str.contains(f'{var_string}')])\n",
        "\n",
        "    return df\n",
        "\n",
        "def plotly_stacked(df, var_string, num_program, exact_program, drop = True):\n",
        "  ex_var = f'{var_string}_ex'\n",
        "  good_var = f'{var_string}_good'\n",
        "  fairpoor_var = f'{var_string}_fair_poor'\n",
        "\n",
        "  plot_names = {fairpoor_var: 'Fair Poor', good_var: 'Good', ex_var: 'Excellent'}\n",
        "\n",
        "  if num_program == 1:\n",
        "    df = df.loc[:, df['program'] == exact_program]\n",
        "\n",
        "    df['program'] = df['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "    title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "    \n",
        "    if drop == True:\n",
        "      pro_fig = px.bar(df.dropna(), x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "\n",
        "      return pro_fig\n",
        "    \n",
        "    else:\n",
        "      pro_fig = px.bar(df, x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "\n",
        "      return pro_fig\n",
        "\n",
        "  else:\n",
        "    df = df.loc[df['program'].isin(exact_program)]\n",
        "\n",
        "    df['program'] = df['program'].str.title().str.replace('_', ' ')\n",
        "    \n",
        "    title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "    if drop == True:\n",
        "      pro_fig = px.bar(df.dropna(), x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "\n",
        "      return pro_fig\n",
        "    \n",
        "    else:\n",
        "      pro_fig = px.bar(df, x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "      \n",
        "      return pro_fig\n",
        "\n",
        "\n",
        "def var_table(wide_df, var_string, drop = True):\n",
        "  if drop == True:\n",
        "    wide_df = wide_df.dropna().round(2).sort_values(['program', 'year'], ascending = True)\n",
        "\n",
        "    wide_df['program'] = wide_df['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "    title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "    table = (\n",
        "        gt(wide_df)\n",
        "        .tab_header(title = f'{title}')\n",
        "        .cols_label(**{'year': 'Year', 'program': 'Program', f'{var_string}_ex': 'Excellent', f'{var_string}_good': 'Good', f'{var_string}_fair_poor': 'Fair Poor'})\n",
        "        .cols_move_to_start(columns = ['year', 'program', f'{var_string}_ex', f'{var_string}_good', f'{var_string}_fair_poor'])\n",
        "    )\n",
        "\n",
        "    return table\n",
        "\n",
        "  else: \n",
        "    wide_df = wide_df.round(2).sort_values(['program', 'year'], ascending = True)\n",
        "\n",
        "    wide_df['program'] = wide_df['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "    title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "    table = (\n",
        "        gt(wide_df)\n",
        "        .tab_header(title = f'{title}')\n",
        "        .cols_label(**{'year': 'Year', 'program': 'Program', f'{var_string}_ex': 'Excellent', f'{var_string}_good': 'Good', f'{var_string}_fair_poor': 'Fair Poor'})\n",
        "        .cols_move_to_start(columns = ['year', 'program', f'{var_string}_ex', f'{var_string}_good', f'{var_string}_fair_poor'])\n",
        "    )\n",
        "\n",
        "    return table"
      ],
      "id": "90edb6bf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| eval: false\n",
        "\n",
        "def remove_excellent_good(df, var_string, long = False):\n",
        "  if long == False:\n",
        "    df = df.loc[:, df.columns.str.contains(f'year|program|{var_string}')]\n",
        "\n",
        "    df[f'{var_string}_good'] = df.loc[:, df.columns.str.contains('_ex_good$')].squeeze() - df.loc[:, df.columns.str.contains('_ex$')].squeeze()\n",
        "\n",
        "    df = df.drop(columns = f'{var_string}_ex_good')\n",
        "\n",
        "    return df\n",
        "\n",
        "  elif long == True:\n",
        "    df = df.loc[:, df.columns.str.contains(f'year|program|{var_string}')]\n",
        "\n",
        "    df[f'{var_string}_good'] = df.loc[:, df.columns.str.contains('_ex_good$')].squeeze() - df.loc[:, df.columns.str.contains('_ex$')].squeeze()\n",
        "\n",
        "    df = df.drop(columns = f'{var_string}_ex_good')\n",
        "\n",
        "    df = df.melt(id_vars = ['year', 'program'], value_vars = df.loc[:, df.columns.str.contains(f'{var_string}')])\n",
        "\n",
        "    return df\n",
        "\n",
        "def plotly_stacked(df, var_string, num_program, exact_program, drop = True):\n",
        "\n",
        "  ex_var = f'{var_string}_ex'\n",
        "  good_var = f'{var_string}_good'\n",
        "  fairpoor_var = f'{var_string}_fair_poor'\n",
        "\n",
        "  plot_names = {fairpoor_var: 'Fair Poor', good_var: 'Good', ex_var: 'Excellent'}\n",
        "\n",
        "  if num_program == 1:\n",
        "    df = df.loc[df['program'] == exact_program]\n",
        "\n",
        "    df['program'] = df['program'].str.title().str.replace('_', ' ')\n",
        "    df['variable'] = pd.Categorical(df['variable'], categories=[fairpoor_var, good_var, ex_var])\n",
        "\n",
        "    title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "    color_map = {fairpoor_var: '#a1c9f4', good_var: '#ffb482', ex_var: '#8de5a1'}\n",
        "    \n",
        "    if drop == True:\n",
        "      pro_fig = px.bar(df.dropna(), x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, color_discrete_map = color_map,\n",
        "      title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "\n",
        "      return pro_fig\n",
        "    \n",
        "    else:\n",
        "      pro_fig = px.bar(df, x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, color_discrete_map = color_map,\n",
        "      title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "\n",
        "      return pro_fig\n",
        "\n",
        "  else:\n",
        "    df = df.loc[df['program'].isin(exact_program)]\n",
        "\n",
        "    df['program'] = df['program'].str.title().str.replace('_', ' ')\n",
        "    df['variable'] = pd.Categorical(df['variable'], categories=[fairpoor_var, good_var, ex_var])\n",
        "    \n",
        "    title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "    color_map = {fairpoor_var: '#a1c9f4', good_var: '#ffb482', ex_var: '#8de5a1'}\n",
        "\n",
        "    if drop == True:\n",
        "      pro_fig = px.bar(df.dropna(), x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, color_discrete_map = color_map,\n",
        "      title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "\n",
        "      return pro_fig\n",
        "    \n",
        "    else:\n",
        "      pro_fig = px.bar(df, x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]}, color_discrete_map = color_map,\n",
        "      title = title)\n",
        "      pro_fig.for_each_xaxis(lambda xaxis: xaxis.update(title = ''))\n",
        "      pro_fig.for_each_trace(lambda t: t.update(name = plot_names[t.name], legendgroup = plot_names[t.name], hovertemplate = t.hovertemplate.replace(t.name, plot_names[t.name])))\n",
        "      \n",
        "      return pro_fig\n",
        "\n",
        "def var_table(wide_df, var_string, num_program, exact_program, drop = True):\n",
        "  if drop == True:\n",
        "    wide_df = wide_df.dropna().round(2).sort_values(['program', 'year'], ascending = True)\n",
        "\n",
        "    if num_program == 1:\n",
        "      exact_program = exact_program[0] if isinstance(exact_program, list) else exact_program\n",
        "      wide_df = wide_df.loc[wide_df['program'] == exact_program]\n",
        "\n",
        "      wide_df['program'] = wide_df['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "      title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "      table = (\n",
        "          GT(wide_df)\n",
        "          .tab_header(title = title)\n",
        "          .cols_label(**{'year': 'Year', 'program': 'Program', f'{var_string}_ex': 'Excellent', f'{var_string}_good': 'Good', f'{var_string}_fair_poor': 'Fair Poor'})\n",
        "          .cols_move_to_start(columns = ['year', 'program', f'{var_string}_ex', f'{var_string}_good', f'{var_string}_fair_poor'])\n",
        "      )\n",
        "\n",
        "      return table\n",
        "\n",
        "    else:\n",
        "        wide_df = wide_df.loc[wide_df['program'].isin(exact_program)]\n",
        "\n",
        "        wide_df['program'] = wide_df['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "        title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "        table = (\n",
        "            GT(wide_df)\n",
        "            .tab_header(title = title)\n",
        "            .cols_label(**{'year': 'Year', 'program': 'Program', f'{var_string}_ex': 'Excellent', f'{var_string}_good': 'Good', f'{var_string}_fair_poor': 'Fair Poor'})\n",
        "            .cols_move_to_start(columns = ['year', 'program', f'{var_string}_ex', f'{var_string}_good', f'{var_string}_fair_poor'])\n",
        "        )\n",
        "\n",
        "        return table\n",
        "\n",
        "  else: \n",
        "    wide_df = wide_df.round(2).sort_values(['program', 'year'], ascending = True)\n",
        "\n",
        "    if num_program == 1:\n",
        "      exact_program = exact_program[0] if isinstance(exact_program, list) else exact_program\n",
        "      wide_df = wide_df.loc[wide_df['program'] == exact_program]\n",
        "\n",
        "      wide_df['program'] = wide_df['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "      title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "      table = (\n",
        "          GT(wide_df)\n",
        "          .tab_header(title = title)\n",
        "          .cols_label(**{'year': 'Year', 'program': 'Program', f'{var_string}_ex': 'Excellent', f'{var_string}_good': 'Good', f'{var_string}_fair_poor': 'Fair Poor'})\n",
        "          .cols_move_to_start(columns = ['year', 'program', f'{var_string}_ex', f'{var_string}_good', f'{var_string}_fair_poor'])\n",
        "      )\n",
        "\n",
        "      return table\n",
        "\n",
        "    else:\n",
        "        wide_df = wide_df.loc[wide_df['program'].isin(exact_program)]\n",
        "\n",
        "        wide_df['program'] = wide_df['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "        title = program_title_df.loc[program_title_df['var_name'] == f'{var_string}', 'title_name'].iloc[0]\n",
        "\n",
        "        table = (\n",
        "            GT(wide_df)\n",
        "            .tab_header(title = title)\n",
        "            .cols_label(**{'year': 'Year', 'program': 'Program', f'{var_string}_ex': 'Excellent', f'{var_string}_good': 'Good', f'{var_string}_fair_poor': 'Fair Poor'})\n",
        "            .cols_move_to_start(columns = ['year', 'program', f'{var_string}_ex', f'{var_string}_good', f'{var_string}_fair_poor'])\n",
        "        )\n",
        "\n",
        "        return table"
      ],
      "id": "5d420c4e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.arange(2, len(unique_program_var))\n",
        "\n",
        "remove_excellent_good(program_df, unique_program_var[2], long = False)\n",
        "\n",
        "wide_program_df = []\n",
        "\n",
        "for i in np.arange(2, len(unique_program_var)):\n",
        "  df = remove_excellent_good(program_df, unique_program_var[i], long = False)\n",
        "  wide_program_df.append(df)\n",
        "\n",
        "wide_program_df[0].round(2).dropna().sort_values(['program', 'year'], ascending = True)\n",
        "\n",
        "# var_string1 = 'fac_qual'\n",
        "# (\n",
        "#   gt(wide_program_df[0].dropna().round(2))\n",
        "#   .tab_header(title = 'Faculty Quality')\n",
        "#   .cols_label(**{'year': 'Year', 'program': 'Program', f'{var_string1}_ex': 'Excellent', f'{var_string1}_good': 'Good', f'{var_string1}_fair_poor': 'Fair Poor'})\n",
        "#   .cols_move_to_start(columns = ['year', 'program', f'{var_string1}_ex', f'{var_string1}_good', f'{var_string1}_fair_poor'])\n",
        "# )\n",
        "\n",
        "long_program_df = []\n",
        "\n",
        "for i in np.arange(2, len(unique_program_var)):\n",
        "  df = remove_excellent_good(program_df, unique_program_var[i], long = True)\n",
        "  long_program_df.append(df)\n",
        "\n",
        "# long_program_df[0].dropna().rename({'year': 'Year'})\n",
        "# \n",
        "# long_program_df[0].head()\n",
        "# \n",
        "# long_program_df[0]['program'].str.title().str.replace('_', ' ')\n",
        "\n",
        "# ex_var = 'fac_qual_ex'\n",
        "# good_var = 'fac_qual_good'\n",
        "# fairpoor_var = 'fac_qual_fair_poor'\n",
        "# \n",
        "# px.bar(number_of_programs(long_program_df[0], 2, ['school_psychology', 'special_education']).dropna(), x = 'program', y = 'value', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]})\n",
        "# \n",
        "# px.bar(long_program_df[0].dropna(), x = 'value', y = 'program', color = 'variable', facet_col = 'year', category_orders = {'variable': [fairpoor_var, good_var, ex_var]})"
      ],
      "id": "217a8afa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# remove_excellent_good(program_df, 'fac_qual', long = True)\n",
        "\n",
        "# number_of_programs(remove_excellent_good(program_df, unique_program_var[2], long = True), 2, ['school_psychology', 'special_education'])\n",
        "\n",
        "plotly_stacked(long_program_df[0], unique_program_var[2], 1, all_programs[0])\n",
        "\n",
        "var_table(wide_program_df[4], unique_program_var[6])"
      ],
      "id": "9fbedc56",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "advisor_cols = grad[grad.columns[grad.columns.str.contains('_agree$|disagree$')]].iloc[:, 0:26]\n",
        "\n",
        "advisor_long = grad.melt(id_vars = ['year', 'program', 'number_respondents'], value_vars = advisor_cols.columns)"
      ],
      "id": "9a022c21",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "inclusive_cols = grad[grad.columns[grad.columns.str.contains('_agree$|disagree$|_strong$')]].iloc[:, 27:59]\n",
        "\n",
        "inclusive_long = grad.melt(id_vars = ['year', 'program', 'number_respondents'], value_vars = inclusive_cols.columns)"
      ],
      "id": "0c0f3675",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/jon/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}